/* liblocation.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Location", lower_case_cprefix = "location_")]
namespace Location {
	[Compact]
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public class CellInfo {
		public int flags;
		public void* gsm_cell_info;
		public void* wcdma_cell_info;
	}
	[CCode (cheader_filename = "location/location-gpsd-control.h")]
	public class GPSDControl : GLib.Object {
		public static weak Location.GPSDControl get_default ();
		public void request_status ();
		public void start ();
		public void stop ();
		[NoAccessorMethod]
		public int preferred_interval { get; set; }
		[NoAccessorMethod]
		public int preferred_method { get; set; }
		public virtual signal void error ();
		public virtual signal void gpsd_running ();
		public virtual signal void gpsd_stopped ();
	}
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public class GPSDevice : GLib.Object {
		public weak Location.CellInfo cell_info;
		public weak Location.GPSDeviceFix fix;
		public bool online;
		public weak GLib.PtrArray satellites;
		public int satellites_in_use;
		public int satellites_in_view;
		public Location.GPSDeviceStatus status;
		public void reset_last_known ();
		public void start ();
		public void stop ();
		public virtual signal void changed ();
		public virtual signal void connected ();
		public virtual signal void disconnected ();
	}
	[Compact]
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public class GPSDeviceFix {
		public double altitude;
		public double climb;
		public double dip;
		public double epc;
		public double epd;
		public double eph;
		public double eps;
		public double ept;
		public double epv;
		public uint fields;
		public double latitude;
		public double longitude;
		public Location.GPSDeviceMode mode;
		public double pitch;
		public double roll;
		public double speed;
		public double time;
		public double track;
	}
	[Compact]
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public class GPSDeviceSatellite {
		public int azimuth;
		public int elevation;
		public bool in_use;
		public int prn;
		public int signal_strength;
	}
	[CCode (cprefix = "LOCATION_GPS_DEVICE_MODE_", has_type_id = "0", cheader_filename = "location/location-gps-device.h")]
	public enum GPSDeviceMode {
		NOT_SEEN,
		NO_FIX,
		2D,
		3D
	}
	[CCode (cprefix = "LOCATION_GPS_DEVICE_STATUS_", has_type_id = "0", cheader_filename = "location/location-gps-device.h")]
	public enum GPSDeviceStatus {
		NO_FIX,
		FIX,
		DGPS_FIX
	}
	[CCode (cprefix = "LOCATION_METHOD_", has_type_id = "0", cheader_filename = "location/location-gps-device.h")]
	public enum Method {
		GNSS,
		ACWP,
		CWP,
		USER_SELECTED
	}
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public const int CELL_INFO_GSM_CELL_INFO_SET;
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public const int CELL_INFO_WCDMA_CELL_INFO_SET;
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public const int GPS_DEVICE_ALTITUDE_SET;
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public const int GPS_DEVICE_CLIMB_SET;
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public const int GPS_DEVICE_LATLONG_SET;
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public const int GPS_DEVICE_NONE_SET;
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public const int GPS_DEVICE_SPEED_SET;
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public const int GPS_DEVICE_TIME_SET;
	[CCode (cheader_filename = "location/location-gps-device.h")]
	public const int GPS_DEVICE_TRACK_SET;
	[CCode (cheader_filename = "location/location-distance-utils.h")]
	public static double distance_between (double latitude_s, double longitude_s, double latitude_f, double longitude_f);
	[CCode (cheader_filename = "location/location-misc.h")]
	public static void make_resident ();
}
