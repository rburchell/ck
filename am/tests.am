# run every binary
TESTS = $(check_PROGRAMS)

# include header files from source as a last resource and use QTest, coverage
AM_CXXFLAGS += $(QtTest_CFLAGS) $(COV_CXXFLAGS)
AM_LDFLAGS += $(QtTest_LIBS) $(COV_LIBS)

# We need to put $(FROM_SOURCE) into BUILT_SOURCES so that header
# files are copied before they are needed.
BUILT_SOURCES = $(FROM_SOURCE)

# recompile every file %.cpp in FROM_SOURCE as src_%.o in the current
# test directory (so the mock objects don't have to be ABI compatible)
$(FROM_SOURCE): %: $(FROM_SOURCE_DIR)/%
	ln -sf $< $@

check_LIBRARIES = libsrc.a  # library built from files in the real source
nodist_libsrc_a_SOURCES = $(FROM_SOURCE)
LDADD += $(check_LIBRARIES)    # add it to the linking

# tests should be always debuggable, can't use AM_CXXFLAGS, because
# that is too early
CXXFLAGS += -O0 -g

covoptioncheck:
	@if test "$(GCOV)" = "" ; then \
		echo "The project hasn't been configured for coverage, please rerun configure with --with-coverage"; \
		exit 1; \
	fi
	@if test "$(COVERAGE_FILES)" = "" ; then \
		echo "The directory hasn't been configured for coverage, please add COVERAGE_FILES variable to Makefile.am"; \
		exit 2; \
	fi

SELECTED_FOR_COVERAGE = $(patsubst %.cpp, '*/unit-tests/*/%.cpp', $(COVERAGE_FILES))
coverage: covoptioncheck check
	@echo "building coverage"
	mkdir -p coverage
	lcov --directory . --capture --output-file coverage/all.cov
	lcov --extract coverage/all.cov $(SELECTED_FOR_COVERAGE) --output-file coverage/selected.cov
	lcov --extract coverage/all.cov '*/unit-tests/*/*.cpp' --output-file coverage/src.cov
	genhtml -o coverage/ coverage/src.cov

clean-local:
	rm -rf coverage *.gcno *.gcda *.gcov $(FROM_SOURCE)

# in maintainer mode, compile everything at make time, not at make check time
all-am:
	if test "$(USE_MAINTAINER_MODE)" = yes; then \
		$(MAKE) $(AM_MAKEFLAGS) $(check_LIBRARIES) $(check_PROGRAMS); \
	fi

.PHONY: coverage covoptioncheck
