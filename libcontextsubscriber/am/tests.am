# run every binary
TESTS = $(check_PROGRAMS)

# include header files from source as a last resource and use QTest
AM_CPPFLAGS = -I$(top_srcdir)/src $(QtTest_CFLAGS) $(QtDBus_CFLAGS)
AM_LDFLAGS = $(QtTest_LIBS) $(QtDBus_LIBS)

# recompile every file %.cpp in SOURCE_CXX as mock_%.o in the current
# test directory (so the mock objects don't have to be ABI compatible)
FAKE_SOURCE_CXX = $(patsubst %.cpp, mock_%.cpp, $(SOURCE_CXX))
mock_%.cpp: $(top_srcdir)/src/%.cpp
	cp $< $@

# build a library from them
check_LIBRARIES += libmock.a
nodist_libmock_a_SOURCES = $(FAKE_SOURCE_CXX)
nodist_libmock_a_OBJECTS = $(nodist_libmock_a_SOURCES:%.cpp=%.o)

# and add it to the build
LDADD += libmock.a

# clean them up
CLEANFILES += $(FAKE_SOURCE_CXX) *.gcno *.gcda *.gcov

# tests should be always debuggable
CXXFLAGS += -O0 -g

# coverage things
AM_CXXFLAGS = $(COV_CXXFLAGS)
LDADD += $(COV_LIBS)

covoptioncheck:
	@if test "$(GCOV)" = "" ; then \
		echo "The project hasn't been configured for coverage, please rerun configure with --with-coverage"; \
		exit 1; \
	fi
	@if test "$(COVERAGE_FILES)" = "" ; then \
		echo "The directory hasn't been configured for coverage, please add COVERAGE_FILES variable to Makefile.am"; \
		exit 2; \
	fi

SELECTED_FOR_COVERAGE = $(patsubst %.cpp, '*/unit-tests/*/mock_%.cpp', $(COVERAGE_FILES))
coverage: covoptioncheck check
	@echo "building coverage"
	mkdir -p coverage
	lcov --directory . --capture --output-file coverage/all.cov
	lcov --extract coverage/all.cov $(SELECTED_FOR_COVERAGE) --output-file coverage/selected.cov
	lcov --extract coverage/all.cov '*/unit-tests/*/mock_*.cpp' --output-file coverage/mock.cov
	genhtml -o coverage/ coverage/mock.cov

clean-local:
	rm -rf coverage

all:
	if test "$(USE_MAINTAINER_MODE)" = yes; then \
		$(MAKE) $(AM_MAKEFLAGS) $(check_LIBRARIES) $(check_PROGRAMS); \
	fi

.PHONY: coverage covoptioncheck
